% -----------------------------------------------------------------------
%   webquiz.cfg | webquiz TeX4ht configuration file
% -----------------------------------------------------------------------
%
%   Copyright (C) Andrew Mathas and Don Taylor, University of Sydney
%
%   Distributed under the terms of the GNU General Public License (GPL)
%               http://www.gnu.org/licenses/
%
%   This file is part of the WebQuiz system.
%
%   <Andrew.Mathas@sydney.edu.au>
% ----------------------------------------------------------------------

\NeedsTeXFormat{LaTeX2e}[1996/12/01]
\ProvidesFile{webquiz.cfg}[2019/01 v5.0 tex4ht configuration file for WebQuiz]

\makeatletter% quite surprisingly, this is needed!

% shortcut for inserting newlines into xml ifle
\newcommand\HNewLine{\HCode{\Hnewline}}

% Generate HTML5 + MathML code
\Preamble{xhtml,mathml,html5,NoFonts,charset="utf-8",ext=xml,svg}

% Don't output xml version tag
\Configure{VERSION}{}

% Output a WebQuiz doctype instead of the default for HTML5
\Configure{DOCTYPE}{\HCode{<?xml version="1.0" encoding="UTF-8" standalone="no"?>\Hnewline
<!DOCTYPE webquiz SYSTEM "webquiz.dtd">}}

% store the quiz specifications as attributes to <quiz>
\Configure{HTML}{%
  \HNewLine%
  \Tg<webquiz hide_side_menu="\latexquizOption{hidesidemenu value}"
              language="\latexquizOption{language}"
              one_page="\latexquizOption{onepage value}"
              pst2pdf="\latexquizOption{pst2pdf value}"
              random_order="\latexquizOption{randomorder value}"
              src="\jobname.tex"
              theme="\latexquizOption{theme}">
  \HNewLine%
  \Tg<title>\@title\Tg</title>%
  \HNewLine%
  \Tg<breadcrumb breadcrumbs="\MQ@breadcrumbs">\MQ@breadcrumb\Tg</breadcrumb>%
  \HNewLine%
  \Tg<unit_name url="\uos@url" quizzes_url="\MQ@quizzesUrl">\uos@name\Tg</unit_name>%
  \HNewLine%
  \Tg<unit_code>\uos@code\Tg</unit_code>%
  \HNewLine%
  \Tg<department url="\MQ@departmentURL">\MQ@department\Tg</department>%
  \HNewLine%
  \Tg<institution url="\MQ@institutionURL">\MQ@institution\Tg</institution>%
  \HNewLine%
}{\Tg</webquiz>}

% reset all configurations
\Configure{HEAD}{}{}
\Configure{BODY}{}{}
\Configure{TITLE}{}{}
\Configure{TITLE+}{}
\Configure{thanks author date and}{}{}{}{}{}{}{}{}
\renewcommand{\maketitle}{}

% pstricks pictures need to be converted to svg images
\ConfigureEnv{psmatrix}{\Picture*{}}{\EndPicture}{}{}
\Configure{Picture}{.svg}

%\Configure{textit}{\HCode{<span class="textit">}\NoFonts}{\EndNoFonts\HCode{</span>}}
%\Configure{textsf}{\HCode{<span class="textsf">}\NoFonts}{\EndNoFonts\HCode{</span>}} 

% The webquiz macros and environments need to write opening and closing tags to
% the xml file. Opening these tags is easy. To close them we use \MQ@closeXXX
% and \MQ@@closeXXX macros. Each time a tag is opened we \let the \MQ@closeTag
% macro to the corresponding \MQ@@close macro. The \MQ@@close macro closes the
% tag and then \let's the \MQ@closeTag macro to \relax. This allows us to use
% the \MQ@close macros at the start of the tag routines below, which results in
% fairly transparent and readable code.

% make the @close tags \relax initially
\let\MQ@closeTag\relax % closes \correct, \incorrect, \response, \whenRight and \whenWrong
\let\MQ@closeText\relax   % closes text

% text tags - everything in wrapped inside <text>...</text> tags
\def\MQ@openText{\Tg<text>\HtmlParOff\HCode{<![CDATA[}\let\MQ@closeText\MQ@@closeText}
\def\MQ@@closeText{\HCode{]]>}\HtmlParOn\Tg</text>\HNewLine\global\let\MQ@closeText\relax}

% -----------------------------------------------------------------------
% discussion environment
% -----------------------------------------------------------------------

% discussion environments
\RenewDocumentEnvironment{discussion}{O{Discussion}O{#1}}{%
    \MQ@DicsussionStart%
    \HNewLine%
    \Tg<discussion>\HNewLine
    \Tg<short_heading>#1\Tg</short_heading>\HNewLine
    \Tg<heading>#2\Tg</heading>\HNewLine
    \Tg<text>\HCode{<![CDATA[}% don't use \MQ@openText as we want paragraphs
}{\EndP\HCode{]]>}\Tg</text>\HNewLine\Tg</discussion>\HNewLine\MQ@DiscussionEnd}

% -----------------------------------------------------------------------
% question environment
% -----------------------------------------------------------------------

\renewenvironment{question}{%
  \MQ@QuestionStart%
  \IgnorePar\HCode{\Hnewline<question>}% open the question tag
  \MQ@openText% start some text
}{\MQ@QuestionEnd\MQ@closeText\MQ@closeTag\Tg</question>\HNewLine}

% -----------------------------------------------------------------------
% choice environment, \correct and \incorrect choices and \response
% -----------------------------------------------------------------------

\RenewDocumentEnvironment{choice}{O{}}{%
  \MQ@ChoiceStart{#1}%
  \MQ@closeText% close any open text tags and then insert tex4ht code
  \IgnorePar%
  \Tg<choice type="\pgfkeysvalueof{/webquiz checker/mode}"
             columns="\pgfkeysvalueof{/webquiz checker/columns value}">%
  \let\MQ@closeTag\relax%
}{\MQ@ChoiceEnd\MQ@closeTag\Tg</choice>}

% correct and incorrect items
\def\MQ@@closeItem{\MQ@closeText\Tg</item>\HNewLine\let\MQ@closeTag\relax}
\def\MQ@item#1{%
  \MQ@ItemEnd%
  \MQ@closeTag%
  \Tg<item correct="#1" symbol="\thechoice">\MQ@openText%
  \let\MQ@closeTag\MQ@@closeItem%
}
\def\correct{\MQ@item{true}}
\def\incorrect{\MQ@item{false}}

% responses
\def\MQ@@closeResponse{\MQ@closeText\Tg</response>\HNewLine\let\MQ@closeTag\relax}
\def\response{%
  \MQ%ResponseStart%
  \MQ@closeTag\Tg<response>\MQ@openText\let\MQ@closeTag\MQ@@closeResponse%
}

% -----------------------------------------------------------------------
% The \answer macro and \whenRight, \whenWrong
% -----------------------------------------------------------------------

\RenewDocumentCommand\answer {sO{string}m}{%
  \MQ@AnswerStart%
  \MQ@closeText%
  \IfBooleanTF{#1}{\def\MQ@prompt{false}}{\def\MQ@prompt{true}}%
  \Tg<answer prompt="\MQ@prompt" comparison="#2">\HNewLine%
  \MQ@openText#3\MQ@closeText%
  \Tg</answer>%
  \HNewLine%
  \MQ@openText%
}

% whenRight and whenWrong
\def\MQ@@closeWhenRight{\MQ@closeText\Tg</when_Right>\HNewLine\let\MQ@closeTag\relax}
\def\MQ@@closeWhenWrong{\MQ@closeText\Tg</when_Wrong>\HNewLine\let\MQ@closeTag\relax}
\def\MQ@When#1{%
  \MQ@WhenStart%
  \IgnorePar\Tg<when_#1>\MQ@openText%
  \letcs\MQ@closeTag{MQ@@closeWhen#1}
}
\def\whenRight{\MQ@When{Right}}
\def\whenWrong{\MQ@When{Wrong}}

% quizindex environment and \quiz
\ConfigureEnv{quizindex}{\MQ@QuizIndexStart\Tg<quizindex>\HNewLine}{\Tg</quizindex>\HNewLine\MQ@QuizIndexEnd}{}{}
\RenewDocumentCommand\quiz{som}{\refstepcounter{quiz}%
  \MQ@QuizStart%
  \IfBooleanTF{#1}{\def\MQ@prompt{false}}{\def\MQ@prompt{true}}%
  \IfNoValueTF{#2}{\def\MQ@url{quiz\thequiz.html}}{\def\MQ@url{#2}}%
  \Tg<index_item prompt="\MQ@prompt" url="\MQ@url">\MQ@openText #3 \MQ@closeText\Tg</index_item>\HNewLine%
}

% from https://tex.stackexchange.com/questions/225554/syntax-highlighting-in-an-html-presentation
% extract current color as hexadecimal value
\makeatletter
\ifdefined\lst@version
  \newcommand\tsf@getColor[1][.]{
      % colorname `.` holds current color
      \extractcolorspec{.}{\tsf@color}
      \expandafter\convertcolorspec\tsf@color{HTML}\tsf@color
      %\tmpcolor
  }

  % write css color for given css selector
  \newcommand\CssColor[1]{%on-l
      % save current color
      \tsf@getColor%
      \Css{#1{color:\#\tsf@color;}}%
  }
\fi

% Do not set indent and noindent classes on paragraphs
\Configure{HtmlPar}
    {\EndP\Tg<p>}
    {\EndP\Tg<p>}
    {\HCode{</p>\Hnewline}}
    {\HCode{</p>\Hnewline}}

\renewcommand\DisplayAsImage[2][]{%
  \csletcs{real:#2}{#2}%
  \NewConfigure{#2}{2}
  \csdef{#2}##1{\Picture+[#1]{}\csuse{real:#2}{##1}\EndPicture}
  \Configure{#2}{\Picture+[#1]{}}{\EndPicture}
}

\begin{document}

% disable \title after \begin{document}
\def\title{\MQ@Error{\@backslashchar title can only be used in the preamble}\@ehc}

%% this code is for processing the listing environments in the on-line manual
\ifdefined\lst@version
  % from https://www.mail-archive.com/tex4ht@tug.org/msg00116.html
  \let\savecolor\color
  \NewConfigure{color}[2]{\def\a@color{#1}\def\b@color{#2}}
  \def\@@tmp#1{\a@color#1\b@color\savecolor{#1}\aftergroup\endspan}
  \let\color\@@tmp
  \def\endspan{\Tg</span>}
  \Configure{color}{\HCode{<span style="color:}}{\HCode{">}}

  \ConfigureEnv{lstlisting}
     {\let\color\savecolor
      \ifvmode \IgnorePar\fi \EndP
      \gHAdvance\listingN by 1
      \HCode{<!--l. \the\inputlineno-->}%
      \gdef\start:LstLn{\HCode{<div class="lstlisting" id="listing-\listingN">}%
        \gdef\start:LstLn{\leavevmode\special{t4ht@+\string&{35}x00A0{59}}x%
      \HCode{<br/>}}}
      \bgroup
         \Configure{listings}
           {{\everypar{}\leavevmode}}
           {{\everypar{}\leavevmode}}
           {\start:LstLn \HCode{<span class="label">}}
           {\HCode{</span>}}%
     }
     {\egroup
      \ifvmode \IgnorePar\fi \EndP \HCode{</div>}\par}
     {}{}

  % for listings in webquiz-manual
  % from https://tex.stackexchange.com/questions/225554/syntax-highlighting-in-an-html-presentation
  \newcommand\LstCss[2]{%
      \bgroup%
          \csname lst@#2\endcsname%
          \CssColor{#1}%
      \egroup%
  }

  \LstCss{div.lstlisting .ecbx-1000}{keywordstyle}
  \LstCss{div.lstlisting .ecss-1000}{commentstyle}
  \LstCss{div.lstlisting .ectt-1000}{basicstyle}
\fi

\makeatother

\EndPreamble

% bug fix for \mathbf from http://tex.stackexchange.com/questions/362178
%\Configure{mathbf}{\HCode{<mi mathvariant="bold">}\PauseMathClass}{\EndPauseMathClass\HCode{</mi>}}

\endinput
%%
%% End of file `webquiz.cfg'.
