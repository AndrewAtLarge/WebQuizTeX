r'''
-----------------------------------------------------------------------------
    webquiz_xml | xml reader for reading the xml file generated by tex4ht
-----------------------------------------------------------------------------

    Copyright (C) Andrew Mathas and Donald Taylor, University of Sydney

    Distributed under the terms of the GNU General Public License (GPL)
                  http://www.gnu.org/licenses/

    This file is part of the Math_quiz system.

    <Andrew.Mathas@sydney.edu.au>
    <Donald.Taylor@sydney.edu.au>
-----------------------------------------------------------------------------
'''

# -*- encoding: utf-8 -*-

import sys
import xml.sax
from webquiz_templates import mathjs

DEBUG = False


def Debugging(*arg):
    if DEBUG:
        sys.stderr.write('ReadWebQuizXmlFile: ' + ' '.join(
            '%s' % a for a in arg) + '\n')


def ReadWebQuizXmlFile(quizfile, defaults, debugging):
    global DEBUG

    DEBUG = debugging
    parser = xml.sax.make_parser()
    quiz = QuizHandler(defaults)
    parser.setContentHandler(quiz)
    parser.setErrorHandler(quiz)
    parser.setDTDHandler(quiz)
    parser.parse(quizfile)
    return quiz
    #parser.close()


# -----------------------------------------------------
# The HandlerBase class inherits from#:
# DocumentHandler, DTDHandler, EntityResolver, ErrorHandler
# -----------------------------------------------------

class Data(object):
    r'''
    A wrapper object class that holds the data for the different
    components of the quiz.
    '''
    def __init__(self, **args):
        '''
        Accepts key-value pairs, each of which is stored as an attribute
        '''
        self._items = args.items()
        for key, val in args.items():
            setattr(self, key, val)

    def __str__(self):
        return '\n - '.join('{} = {}'.format(k, getattr(self, k)) for k in self._items)

class QuizHandler(xml.sax.ContentHandler):
    """
        The content handler gives the xml tags to `startElement`, which
        initialises the webquiz tags, and then `endElement` attaches the
        content of each webquiz tag tothe appropriate part of `self`. Any end
        tag that is ot special to webquiz has its contents appended to
        `self.text`. Any tag that contains `deFAULT` is set to the system
        default using the `defaults` dictionary.
    """

    def __init__(self, defaults):
        self.defaults = defaults

        # arrays for the different quiz components
        self.discussion_list = []
        self.link_list = []
        self.meta_list = []
        self.question_list = []
        self.quiz_list = []

        self.mathjs_not_linked = True  # to ensure that mathjs is added only once

        # the following tags have defaults set by `defaults`
        self.setting_tags = [
               'breadcrumbs',
               'department',
               'department_url',
               'institution',
               'institution_url',
               'language',
               'theme',
        ]
        # quiz data
        for tag in self.setting_tags:
            setattr(self, tag, defaults[tag])
        self.breadcrumb = ''
        self.text = ''
        self.after_text = ''
        self.title = ''
        self.unit_name = ''

        # keep track of current tags
        self.current_tags=[]


    def set_default_attribute(self, key, value):
        ''' Set the attribute `key` of self, using the default value if
        `value=='deFAULT'`.
        '''
        if value.strip() == 'deFAULT':
            setattr(self, key, self.defaults[key])
        elif hasattr(self, key):
            setattr(self, key, getattr(self,key)+value)
        else:
            setattr(self, key, value)

    def startElement(self, tag, attributes):
        '''
            At the start of each webquiz xml tag we need to pull out the
            attributes and place
        '''

        Debugging('startElement\n - tags={}\n - text={}.'.format(', '.join(self.current_tags), self.text))
        self.current_tags.append(tag)

        # initialise the quiz
        if tag == 'quiz':
            self.src = attributes.get('src')
            for key in ['hidesidemenu', 'language', 'theme']:
                self.set_default_attribute(key, attributes.get(key))

        # set up links, meta tags and department and unit data
        elif tag == 'link':
            self.link_list.append({key: attributes.get(key) for key in attributes.keys()})

        elif tag == 'meta':
            self.meta_list.append({key: attributes.get(key) for key in attributes.keys()})

        elif tag in [' department', 'institution', 'uni']:
            for key in attributes.keys():
                self.set_default_attribute(tag, attributes.get(key))

        elif tag == 'unit':
            self.set_default_attribute('unit_code', attributes.get('code'))
            self.set_default_attribute('unit_url', attributes.get('url'))
            self.quizzes_url = attributes.get('quizzes')
            if self.quizzes_url == 'deFAULT':
                self.quizzes_url = self.unit_url + '/Quizzes'

        # set up questions and discussion
        elif tag == 'discussion':
            discussion = Data(heading = attributes.get('heading'),
                              short_heading = attributes.get('short_heading'),
                              text = ''  # The text of the discussion
            )
            self.discussion_list.append(discussion)

        elif tag == 'question':
            question = Data(text = '',        # The text of the question
                            type = None,      # input, or single or multiple choice
                            after_text = '' # text at end of question
            )
            self.question_list.append(question)

        # process the different question types, items choice and responses
        elif tag == 'answer':
            self.question_list[-1].type = 'input'
            self.question_list[-1].answer = ''
            self.question_list[-1].when_right = ''
            self.question_list[-1].when_wrong = ''
            self.question_list[-1].text += self.text
            self.text = ''

            self.question_list[-1].comparison = attributes.get('comparison')
            if mathjs not in self.link_list and self.question_list[-1].comparison == 'eval':
                self.link_list.append(mathjs)

        elif tag == 'choice':
            self.question_list[-1].type = attributes.get('type')
            self.question_list[-1].cols = int(attributes.get('cols'))
            self.question_list[-1].items = []
            self.question_list[-1].text += self.text
            self.text = ''

        elif tag == 'item':
            self.question_list[-1].items.append(
                    Data(expect= attributes.get('expect'),
                         response='',
                         text=''
                        )
            )

        # finally look after the index file
        elif tag == 'quizlistitem':
            self.quiz_list.append(Data(title=attributes.get('title'),
                                       url=attributes.get('url')
                                 )
            )

        elif tag in ['when_right', 'when_wrong']:
            self.question_list[-1].after_text += self.text
            self.text = ''


    def endElement(self, tag):
        Debugging('endElement\n - tag = {}\n - tags={}\n - text={}.'.format(tag, ', '.join(self.current_tags), self.text))
        self.current_tags.pop()  # remove the last tag from the tag list

        text_used = True # assume that we will use the text

        if tag in self.setting_tags:
            self.set_default_attribute(tag, self.text)

        elif tag == 'unit':
            self.unit_name += self.text

        elif tag == 'answer':
            self.question_list[-1].answer += self.text

        elif tag == 'discussion':
            self.discussion_list[-1].text += self.text

        elif tag =='item':
            self.question_list[-1].items[-1].text += self.text

        elif tag =='response':
            print('adding response={}.'.format(self.text))
            self.question_list[-1].items[-1].response += self.text

        elif tag == 'question':
            self.question_list[-1].after_text += self.text

        elif tag == 'title':
            self.title += self.text

        elif tag == 'unit':
            self.unit_name += self.text

        elif tag == 'when_right':
            self.question_list[-1].when_right += self.text

        elif tag == 'when_wrong':
            self.question_list[-1].when_wrong += self.text

        else:
            # mark that we still need to use the text
            text_used = False

        if text_used:
            Debugging('text "{}" added to {}'.format(self.text, tag))
            self.text = ''

    def characters(self, text):  #data,start,length):
        self.text += text
        Debugging('characters\n - tags={}\n - text={}.'.format(', '.join(self.current_tags), self.text))

    def error(self, e):
        raise e

    def fatalError(self, e):
        raise e
