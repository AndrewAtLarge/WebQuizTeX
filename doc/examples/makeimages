#!/usr/bin/env python3

r'''
-----------------------------------------------------------------------------
    makeimages | extract images from webquiz web pages for the manual
-----------------------------------------------------------------------------

    Copyright (C) Andrew Mathas, University of Sydney

    Distributed under the terms of the GNU General Public License (GPL)
                  http://www.gnu.org/licenses/

    This file is part of the WebQuiz system.

    <Andrew.Mathas@sydney.edu.au>
-----------------------------------------------------------------------------

Python script to extract png images for the various web pages that are in the
webquiz manual. We first use
    - webquiz to construct the web page
    - webkit2png to extract an image of the web page, sometimes with options
    - mogrify to trim the image down to size
Alternatively, it is possible to ecxtract a png image of the PDF file created by wevquiz.
For the full extraction specifications see the image_files dictionary below
'''

import argparse, glob, os, shutil, subprocess

# location of the webquiz example web pages on a development server
examplesURL = "http://localhost/WebQuiz/doc/examples"

# lambda function for running shell commands: run( command )
run  = lambda cmd: subprocess.call(cmd, shell=True)

webquiz_mode = '-qq'
webkit2png_mode = ''

# extract and trim and image using webquiz, webkit2png and mogrify
def webkit2png(file_in, file_out, delay, javascript):
    if os.path.exists(file_out+'.png'): # remove png file if it already exists
        os.remove(file_out+'.png')

    # run the quiz file through webquiz
    run('webquiz {} {}'.format(webquiz_mode, file_in))

    # extract a png image for the web page using webkit2png
    cmd = r"webkit2png {debug} --ignore-ssl-check -o {fout} -W 400 -F --delay={delay} {js} {URL}/{fin}.html".format(
                    URL=examplesURL,
                    debug = webkit2png_mode,
                    delay=delay,
                    fin=file_in,
                    fout=file_out,
                    js='--js="{java};"'.format(java=javascript) if javascript != '' else ''
                )
    if webkit2png_mode == '--debug':
        print(cmd)
    run(cmd)
    if os.path.exists(file_out+'-full.png'): # remove png file if it already exists
        shutil.move(file_out+'-full.png', file_out+'.png')
        run('mogrify -trim -gravity center {}.png'.format(file_out))
    else:
        print('makeimages error: weblit2png failed because {}-full.png does not exist'.format(file_out))

# extract and trim an image of the pdf file using pdflatex, convert and mogrify
def pdf2png(file_in, file_out, dummy1, dummy2):
    run('pdflatex {fin} > /dev/null'.format(fin=file_in))
    run('convert {fin}.pdf {fout}.png && mogrify -trim {fout}.png'.format(fin=file_in, fout=file_out))

# specify how to construct each image:
#   src      isource, either html or pdf
#   file_in  input fileo, defaults to the page key
#   file_out output file, defaults to file_in
#   js       javascript code, defaults to ''
#   delay    delay before taking screenshot defaults to 3
image_files = dict(
    breadcrumbs = dict(src='html', delay=10),
    discussion  = dict(src='html'),
    dropdown    = dict(src='html', js='toggle_dropdown_menu()', delay=10),
    french      = dict(src='html'),
    index       = dict(src='html'),
    montypython = dict(src='html', delay=5),
    multiple    = dict(src='html', file_in='choice-multiple'),
    nounits     = dict(src='html', delay=5),
    pst2pdf     = dict(src='html'),
    question    = dict(src='html'),
    single      = dict(src='html', file_in='choice-single'),
    quizpage    = dict(src='html',
                       file_in='quiz-page',
                       js="document.forms['Q1Form'].elements[1].checked=true; setTimeout(checkAnswer, 4)",
                       delay=5
                  ),
    simplehtml  = dict(src='html', file_in='simple', file_out='simple-html'),
    simplepdf   = dict(src='pdf',  file_in='simple', file_out='simple-pdf'),
    tikzex      = dict(src='html', file_in='tikz-ex')
)

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description = 'Python script to extract images for the webquiz manual',
                                     epilog = 'Images for all pages are extracted if none are specifed'
    )
    parser.add_argument('image', nargs='*',type=str, default=None, help='images to extract')
    parser.add_argument('-c', '--cleaning', action='store_true', default=False, help='delete all extraneous files on exit')
    parser.add_argument('-d', '--debugging', action='store_true', default=False, help='turn on debugging')

    args = parser.parse_args()

    # debugging mode
    if args.debugging:
        webquiz_mode = '--debugging'
        webkit2png_mode = '--debug'

    if args.image == []:
        pages = image_files.keys()
    else:
        pages = []
        for page in args.image:
            if '.' in page:
                page = page[:page.index('.')]
            page = page.replace('-','')
            if page not in image_files:
                print('makeimages error: unrecognised image'.format(page))
            else:
                pages.append(page)

    # run through pages and extract the corresponding images
    for page in pages:
        print('\nExtracting image file for {}...'.format(page))
        extract=image_files[page]
        convert  = globals()['webkit2png' if extract['src']=='html' else 'pdf2png']
        file_in  = extract['file_in']     if 'file_in'  in extract else page
        file_out = extract['file_out']    if 'file_out' in extract else file_in
        delay    = extract['delay']       if 'delay' in extract else 3
        js       = extract['js']  if 'js' in extract else ''
        convert(file_in, file_out, delay, js)

        if args.cleaning:
            for ext in ['.log', '.xml', '-[ft]*.png']:
                for file in glob.glob(file_out+ext):
                    os.remove(file)
            shutil.rmtree(file_out+'/')


