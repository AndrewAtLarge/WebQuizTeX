#!/bin/bash

# Script to generate all of the automatic input for the main web quiz manual.
# That is, update the lists supported languages and themes and generate all of
# the images used by trhe webquiztex manual.

# TODO: rewrite in python to make cross-platform and merge with makeimages

#################################################
WebQuizDir="$(dirname $0)/.."
WebQuizExamplesDir="$WebQuizDir/doc/examples"
PREFIX=""

function message() {
  if [ "$quiet" = false ]; then
     echo -e "${PREFIX}$@"
  fi
}

#################################################
function check_examples() {
  message "Checking for unused images from the examples directory"
  cd $WebQuizDir/doc
  /bin/rm -f makedoc-{examples,images,manual}
  echo "Source files" > makedoc-examples
  ls -1 examples/*.tex | sed 's@.tex@@' | sed 's@examples.@@' | sort -u >> makedoc-examples
  echo "Images in manual" > makedoc-manual
  ag ScreenShot webquiztex.tex|sed 's@.*}{\([^}]*\)}$@\1@'|ag -v Shot|sort -u >> makedoc-manual
  echo "Available images" > makedoc-images
  examples/makeimages --list | sort >> makedoc-images
  gvim -d makedoc-manual makedoc-images makedoc-examples 
}

#################################################
function make_all() {
  makeall=true # so that themes are not built twice
  message "Making pdf for WebQuizTeX manual"
  PREFEX=" - "
  make_languages
  make_settings
  make_themes
  make_usage
  make_examples
  make_man_page
  if  [[ "$fast" = false ]] ; then
      make_online_manual
      pdflatex --interaction=batchmode webquiztex
      pdflatex --interaction=batchmode webquiztex
  fi
  pdflatex --interaction=batchmode webquiztex
}

#################################################
function make_examples() {
  message "Generating WebQuizTeX example images"
  cd $WebQuizExamplesDir
  if [[ "$quiet" == true ]]; then
      q="-q"
  else
      q=""
  fi
  /bin/rm -f *-thumb.png *-clipped.png
  if [[ "$fast" == false ]]; then
    ./makeimages -f $q
  else
    ./makeimages $q
  fi
}

#################################################
function make_languages() {
  message "Generating list of WebQuizTeX supported languages"
  cd $WebQuizDir/latex
  LANG=$(ls -1 webquiztex-*.lang | xargs | sed 's@webquiztex-@@g' | gsed -e 's@\([a-z]*\).lang@\u\1,@g' | sed 's@, \([A-Za-z]*\),$@,, \1@')
  cd $WebQuizDir/doc
  LANGS="webquiztex.languages"
  /bin/rm -f $LANGS
  echo "% List of languages currently supported by WebQuizTeX" > $LANGS
  echo "% Generated using 'makedoc --languages' on $(date '+%Y-%m-%d')" >> $LANGS
  echo "\newcommand\WebQuizLanguages{$LANG}" >> $LANGS
}

#################################################
function make_man_page() {
  # using pando to convert from markdown to man-page format gives horrible
  # results so we go via rst
  pandoc --from=markdown --to=rst --output=webquiztex.rst ../README-ctan.md
  rst2man.py webquiztex.rst webquiztex.1
}

#################################################
function make_settings() {
  message "Generating WebQuizTeX settings file"
  cd $WebQuizDir/doc
  /bin/rm -f webquiztex.settings
  webquiztex --settings >> webquiztex.settings
}

#################################################
function make_themes () {
  message "Generating list of WebQuizTeX supported css themes"

  if [[ "$fast" == false ]]; then
    message "Rebuilding all themes from scss files"
    /bin/rm -f $WebQuizExamplesDir/theme-*.* $WebQuizDir/css/*.css
  fi

  # next generate code to include screenshots for each theme in the appendix
  cd $WebQuizDir/css
  for theme in webquiztex-*.scss ; do
      sass --style compressed $theme ${theme/scss/css}
      name=${theme/webquiztex-/}
      name=${name/.scss/}
      if [ ! -e "$WebQuizExamplesDir/theme-$name.tex" ]; then
        # create theme-<theme>.tex if it does not already exist
        sed "s@default@$name@g" $WebQuizExamplesDir/theme.tex > "$WebQuizExamplesDir/theme-$name.tex"
      fi
  done

  if [[ "$makeall" = false ]]; then
    message "Generating theme screenshots for inclusion in manual"
    $WebQuizExamplesDir/makeimages theme
  fi

  message "Generating list of themes for the manual"
  THEME="$WebQuizDir/doc/webquiztex.themes"
  /bin/rm -f $THEME
  echo "% List of themes supported by WebQuizTeX -- generated $(date '+%Y-%m-%d')" > $THEME
  # first generate a list of themes for the documentclass options section
  cd $WebQuizDir/css
  THEMES=$(ls -1 webquiztex-*.scss | xargs | sed 's@webquiztex-@@g' | sed 's@.scss@,@g' | sed 's@, \([a-z]*\),$@,, \1@')
  echo "\newcommand\WebQuizThemes{$THEMES}" >> $THEME
}

#################################################
function make_usage() {
  message "Generating WebQuizTeX usage file"
  cd $WebQuizDir/doc
  /bin/rm -f webquiztex.usage
  webquiztex --help >> webquiztex.usage
}

#################################################
function make_online_manual() {
  message "Making pdf for online manual"
  cd $WebQuizDir/doc
  latex webquiztex-online-manual && dvipdf webquiztex-online-manual
}

#################################################
function usage() {
  message "Make --[fast|quiet] --[all|check-examples|examples|languages|man-page|online|themes|usage]"
}

makeall=false
fast=false
quiet=false # TODO
command=""  # what we need to execute
if [ $# -eq 0 ]; then
  make_all
else
  while [ $# -gt 0 ]
  do
     case $1 in
       -a|--all)
         make_all
         shift ;;
       -c|--check-examples)
         check_examples
         shift ;;
       -e|--examples)
         make_examples
         shift ;;
       -f|--fast)
         fast=true
         shift ;;
       -l|--languages)
         make_languages
         shift ;;
       -m|--man-page):
         make_man_page
         shift;;
       -o|--online-manual)
         make_online_manual
         shift ;;
       -q|--quiet)
         quiet=true
         shift ;;
       -s|--settings)
         make_settings
         shift ;;
       -t|--theme)
         make_themes
         shift ;;
       -u|--usage)
         make_usage
         shift ;;
       *)
         usage && exit
         shift ;;
     esac
   done
fi
