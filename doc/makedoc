#!/bin/bash

# Script to generate all of the automatic input for the main web quiz manual.
# That is, update the lists supported languages and themes and generate all of
# the images used by webquiz.tex

cd "$(dirname $0)/.."
WebQuizDir="$PWD"
PREFIX=""

function message() {
  if [ "$quiet" = false ]; then
     echo -e "${PREFIX}$@"
  fi
}
function make_languages() {
  message "Generating list of webquiz supported languages"
  cd $WebQuizDir/latex
  LANG=$(ls -1 webquiz-*.lang | xargs | sed 's@webquiz-@@g' | gsed -e 's@\([a-z]*\).lang@\u\1,@g' | sed 's@, \([A-Za-z]*\),$@,, \1@')
  cd $WebQuizDir/doc
  LANGS="webquiz.languages"
  /bin/rm -f $LANGS
  echo "% List of languages currently supported by WebQuiz" > $LANGS
  echo "% Generated using 'makedoc --languages' on $(date '+%Y-%m-%d')" >> $LANGS
  echo "\newcommand\WebQuizLanguages{$LANG}" >> $LANGS
}

function check_examples() {
  message "Checking for unused images from the examples directory"
  cd $WebQuizDir/doc
  /bin/rm -f makedoc-{examples,images,screenshots}
  ls -1 examples/*.tex | sed 's@.tex@@' | sed 's@examples.@@' | sort -u > makedoc-examples
  ag ScreenShot webquiz.tex | sed 's@.*examples.@@'| sed 's@}@@' | sort -u > makedoc-screenshots
  examples/makeimages --list | sort > makedoc-images
  gvim -d makedoc-examples makedoc-images makedoc-screenshots
}

function make_themes () {
  message "Generating list of webquiz supported css themes"

  # next generate code to include screenshots for each theme in the appendix
  MAKEIMAGES="$WebQuizDir/doc/examples/makeimages"
  cd $WebQuizDir/css
  for theme in webquiz-*.scss ; do
      sass --style compressed $theme ${theme/scss/css}
      name=${theme/webquiz-/}
      name=${name/.scss/}
      if [ ! -e "$WebQuizDir/doc/examples/theme-$name.tex" ]; then
        # create theme-<theme>.tex if it does not already exist
        sed "s@default@$name@" $WebQuizDir/doc/examples/theme.tex > "$WebQuizDir/doc/examples/theme-$name.tex"
      fi
  done

  message "Generating list of themes for the manual"
  THEME="$WebQuizDir/doc/webquiz.themes"
  /bin/rm -f $THEME
  echo "% List of themes supported by WebQuiz -- generated $(date '+%Y-%m-%d')" > $THEME
  # first generate a list of themes for the documentclass options section
  cd $WebQuizDir/css
  THEMES=$(ls -1 webquiz-*.scss | xargs | sed 's@webquiz-@@g' | sed 's@.scss@,@g' | sed 's@, \([a-z]*\),$@,, \1@')
  echo "\newcommand\WebQuizThemes{$THEMES}" >> $THEME
}

function make_examples() {
  message "Generating webquiz example images"
  cd $WebQuizDir/doc/examples
  if [ "$quiet" = true ]; then
     ./makeimages > /dev/null
  else ./makeimages
  fi
}

function make_settings() {
  message "Generating webquiz settings file"
  cd $WebQuizDir/doc
  /bin/rm -f webquiz.settings
  webquiz --settings >> webquiz.settings
}

function make_usage() {
  message "Generating webquiz usage file"
  cd $WebQuizDir/doc
  /bin/rm -f webquiz.usage
  webquiz --shorthelp >> webquiz.usage
}

function make_online_manual() {
  message "Making pdf for online manual"
  cd $WebQuizDir/doc
  latex webquiz-online-manual && dvipdf webquiz-online-manual
}

function make_all() {
  message "Making pdf for manual"
  PREFEX=" - "
  make_languages
  make_settings
  make_themes
  make_usage
  make_examples
  if  [[ "$fast" = false ]] ; then
      make_online_manual
      pdflatex --interaction=batchmode webquiz
      pdflatex --interaction=batchmode webquiz
  fi
  pdflatex --interaction=batchmode webquiz
}

function usage() {
  message "Make --[fast|quiet] --[check-examples|examples|languages|manual|online|themes|]"
}

fast=false
quiet=false # TODO
command=""  # what we need to execute
if [ $# -eq 0 ]; then
  make_all
else
  while [ $# -gt 0 ]
  do
     case $1 in
       -a|--all)
         ake_all
         shift ;;
       -c|--check-examples)
         check_examples
         shift ;;
       -e|--examples)
         make_examples
         shift ;;
       -f|--fast)
         fast=true
         shift ;;
       -l|--languages)
         make_languages
         shift ;;
       -o|--online-manual)
         make_online_manual
         shift ;;
       -q|--quiet)
         quiet=true
         shift ;;
       -s|--settings)
         make_settings
         shift ;;
       -t|--theme)
         make_themes
         shift ;;
       -u|--usage)
         make_usage
         shift ;;
       *)
         usage && exit
         shift ;;
     esac
   done
fi
