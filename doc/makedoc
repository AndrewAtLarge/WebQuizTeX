#!/bin/bash

# Script to generate all of the automatic input for the main web quiz manual.
# That is, update the lists supported languages and themes and generate all of
# the images used by webquiz.tex

cd "$(dirname $0)/.."
WebQuizDir="$PWD"
PREFIX=""

function message() {
  if [ "$quiet" = false ]; then
     echo -e "${PREFIX}$@"
  fi
}
function make_languages() {
  message "Generating list of webquiz supported languages"
  LANG="webquiz.languages"
  /bin/rm -f $LANG
  echo -e "% List of languages currently supported by WebQuiz" > $LANG
  echo -e "% Generated using 'makedoc --languages' on $(date '+%Y-%m-%d')" >> $LANG
  (cd $WebQuizDir/latex && ls -1 *.lang | sort | xargs \
              | sed 's@ \([^ ]*\)$@and\n\1@' \
              | sed -e 's@\s*webquiz-\([a-z]*\).lang@\u\1,\\CrossIndex{language}{\1}\n@g' \
              ) >> $LANG
}

function check_examples() {
  message "Checking for unused images from the examples directory"
  /bin/rm -f makedoc-{examples,images,screenshots}
  ls -1 examples/*.tex | sed 's@.tex@@' | sed 's@examples.@@' | sort -u > makedoc-examples
  ag ScreenShot webquiz.tex | sed 's@.*examples.@@'| sed 's@}@@' | sort -u > makedoc-screenshots
  examples/makeimages --list | sort > makedoc-images
  gvim -d makedoc-examples makedoc-images makedoc-screenshots
}

function make_themes () {
  message "Generating list of webquiz supported css themes"

  # next generate code to include screenshots for each theme in the appendix
  THEMESCREENSHOT="$WebQuizDir/doc/webquiz-themes.tex"
  /bin/rm -f $THEMESCREENSHOT
  MAKEIMAGES="$WebQuizDir/doc/examples/makeimages"
  echo -e "% Include screen shots for each theme supported by WebQuiz" > $THEMESCREENSHOT
  echo -e "% Generated using 'makedoc --theme' on $(date '+%Y-%m-%d')" >> $THEMESCREENSHOT
  ( cd $WebQuizDir/css
    for theme in webquiz-*.scss ; do
        sass --style compressed $theme ${theme/scss/css}
        name=${theme/webquiz-/}
        name=${name/.scss/}
        echo -e "\\ShowcaseTheme{$name}" >> $THEMESCREENSHOT
        if [ ! -e "$WebQuizDir/doc/examples/theme-$name.tex" ]; then
          ( cd $WebQuizDir/doc/examples
            sed "s@default@$name@" theme.tex > "theme-$name.tex"
            sed -i 's@    Convert("theme-default"),@&\n    Convert("theme-'"$name"'", question="1:2"),@' $MAKEIMAGES
          )
        fi
    done
  )

  THEME="webquiz.themes"
  /bin/rm -f $THEME
  echo -e "% List of themes currently supported by WebQuiz -- generated $(date '+%Y-%m-%d')\n" > $THEME
  # first generate a list of themes for the documentclass options section
  (cd $WebQuizDir/css && ls -1 webquiz-*.css | sort | xargs \
              | sed 's@ \([^ ]*\)$@and\n\1@' \
              | sed -e 's@\s*webquiz-\([a-z]*\).css@\1,\\CrossIndex{theme}{\1}\n@g' \
              ) >> $THEME
}

function make_examples() {
  message "Generating webquiz example images"
  (cd $WebQuizDir/doc/examples
   if [ "$quiet" = true ]; then
     ./makeimages > /dev/null
   else ./makeimages
   fi
   )
}

function make_settings() {
  message "Generating webquiz settings file"
  /bin/rm -f webquiz.settings
  webquiz --settings >> webquiz.settings
}

function make_usage() {
  message "Generating webquiz usage file"
  /bin/rm -f webquiz.usage
  webquiz --shorthelp >> webquiz.usage
}

function make_online_manual() {
  message "Making pdf for online manual"
  latex webquiz-online-manual && dvipdf webquiz-online-manual
}

function make_all() {
  message "Making pdf for manual"
  PREFEX=" - "
  make_languages
  make_settings
  make_themes
  make_usage
  make_examples
  if  [[ "$fast" = false ]] ; then
      make_online_manual
      pdflatex --interaction=batchmode webquiz
      pdflatex --interaction=batchmode webquiz
  fi
  pdflatex --interaction=batchmode webquiz
}

function usage() {
  message "Make --[fast|quiet] --[check-examples|examples|languages|manual|online|themes|]"
}

fast=false
quiet=false # TODO
command=""  # what we need to execute
if [ $# -eq 0 ]; then
  make_all
else
  while [ $# -gt 0 ]
  do
     case $1 in
       -a|--all)
         command+="make_all "
         shift ;;
       -c|--check-examples)
         command+="check_examples"
         shift ;;
       -e|--examples)
         command+="make_examples"
         shift ;;
       -f|--fast)
         fast=true
         shift ;;
       -l|--languages)
         command+="make_languages"
         shift ;;
       -o|--online-manual)
         command+="make_online_manual"
         shift ;;
       -q|--quiet)
         quiet=true
         shift ;;
       -s|--settings)
         command+="make_settings"
         shift ;;
       -t|--theme)
         command+="make_themes"
         shift ;;
       -u|--usage)
         command+="make_usage"
         shift ;;
       *)
         usage && exit
         shift ;;
     esac
   done
fi
[ "$command" = "" ] && command="make_all"
$command
