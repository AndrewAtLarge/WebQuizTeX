\Configure{html}{xml}
\Preamble{xhtml,imgdir:\jobname/}
% This is the tex4ht configuration file for the quiz2html conversion
% package. We actually don't use much of the the tex4ht configuration
% commands at all and instead redefine the latex macros so as to
% produce the appropriate xml tags. The DTD for the xml file can be
% found in quiz2html.dtd
%
% This file is again based on previous work of Don Taylors and is a
% companion to quiz2html.cls, a latex class file.
%
% Andrew Mathas 2004

% define the quiz2html DTD
\Configure{DOCTYPE}{\Tg<!DOCTYPE quiz2html SYSTEM "quiz2html.dtd">}

\makeatletter
% enclose the entire file in an xml <quiz> class and also produce xml 
% tags for course name, code, url and quiz url
\Configure{HTML}
  {\HCode{\Hnewline<quiz>\Hnewline}%
   \Tg<course name="\CourseName" code="\CourseCode"
              url="\CourseURL"   quizzes="\QuizzesURL" 
              src="\jobname" />
   \HCode{\Hnewline}
   \Tg<title>\@title\Tg</title>\HCode{\Hnewline}}
  {\Tg</quiz>}

% --------------------------------------------------------

% remove default configurations for title, body etc.
\Configure{BODY}{}{}
\Configure{HEAD}{}{}
\Configure{TITLE}{}{}
\Configure{TITLE+}{}
\Configure{thanks author date and}{}{}{}{}{}{}{}{}

% reconfigure the (make)title hook
\renewcommand{\maketitle}{}

% --------------------------------------------------------
% Now we configure the marcros defined in quiz2html.cls

% First macros for opening and closing tags; <text> is a CDATA
% wrapper, and the others do the obvious.
\def\MQ@openText{\Tg<text>\HtmlParOff\HCode{<![CDATA[}}
\def\MQ@closeText{\HCode{]]>}\HtmlParOn\Tg</text>}
\def\MQ@closeResponse{\HCode{]]>}\HtmlParOn\Tg</response>\Tg</item>}
\def\MQ@closeItem{\MQ@closeText\Tg</item>}
\def\MQ@closeAnswer{\Tg</answer>}
\let\MQ@closeOption=\relax

% start quiz list
\renewenvironment{quizlist}{\Tg<quizlist>}{\Tg</quizlist>}
\renewcommand{\quiz}[2][\relax]{%
    \refstepcounter{quiz}
    \ifx#1\relax\def\MQ@url{quiz\thequiz.html}%
    \else\def\MQ@url{#1}%
    \fi%
    \Tg<quizlistitem title="Quiz \thequiz.\space#2" url="\MQ@url"/>
}

% open and close discussion tags: the optional argument gives the
% heading for the "discussion"
\renewenvironment{discussion}[1][Discussion]%
                 {\Tg<discussion heading="#1">\Tg<text>%
                  \HCode{<![CDATA[}}
		 {\HCode{]]>}\Tg</text>\Tg</discussion>}

% \question should produce a <question> tag, and open a <text> tag to
% capture everything up to the next \answer or \begin{choice}. The
% \MQ@close* are there to ensure that all tags are closed.
\renewenvironment{question}{%
        \IgnorePar\HCode{\Hnewline<question>\Hnewline}%
        \let\MQ@closeQuestion=\relax%
        \MQ@openText}%
       {\MQ@closeOption\MQ@closeQuestion\Tg</question>%
        \let\MQ@closeOption=\relax%
       }

% The choice-environment contains answers for a multiple choice
% question. The environment has an optional argument which determines
% whether there is a unique correct answer, or 0 more more correct
% answers. The xml <choice> tag contains a type attribute, which is
% equal to either "single" or "multiuple", which is determined by this
% optional argument. The text immediately following the \begin{choice}
% needs to be thrown into a <text> wrapper, which will be closed by
% the next \correct or \incorrect tag - this is controlled by \MQ@closeOption.
\renewenvironment{Choice}[2][\relax]%
   {\MQ@closeText%  close the <text> containing the question preamble
    \ifx#1\relax\Tg<choice type="single" cols="#2">% open the <choice> tag
    \else\Tg<choice type="multiple" cols="#2">%
    \fi%
    \let\MQ@closeOption=\relax
   }%
   {\MQ@closeOption\Tg</choice>}

\renewenvironment{choice}[1][\relax]%
   {\MQ@closeText%  close the <text> containing the question preamble
    \ifx#1\relax\Tg<choice type="single" cols="2">% open the <choice> tag
    \else\Tg<choice type="multiple" cols="2">%
    \fi%
    \let\MQ@closeOption=\relax
   }%
   {\MQ@closeOption\Tg</choice>}



% \correct and \incorrect start multiple choice options. These macros both
% generate an <item> tag with item.expect equal to true or false.
% Before opening this tag we first need to close the previous tag,
% which is done using \MQ@closeOption.
\def\MQ@item#1{\MQ@closeOption\Tg<item expect="#1">\MQ@openText%
              \let\MQ@closeOption=\MQ@closeItem}
\def\correct{\MQ@item{true}}
\def\incorrect{\MQ@item{false}}

% We also need to cater for \response which needs to be wrapped inside
% a <response> tag.
\renewcommand{\response}{\MQ@closeText% close off the option text
                         \Tg<response>\HtmlParOff\HCode{<![CDATA[}%
                         \let\MQ@closeOption=\MQ@closeResponse}

% \answer has two arguments: the answer (#2) and and optional bit of
% text (#1) which should be placed after the input box for the answer.
% We put #1 into an xml tag called <tag> and the second is an
% attribute in the <answer> tag.
\renewcommand{\answer}[2][\relax]{%
  \MQ@closeText%  close the <text> containing the question preamble
  \Tg<answer value="#2">%
  \ifx#1\relax%
  \else\Tg<tag>\HCode{<![CDATA[}#1\HCode{]]>}\Tg</tag>%
  \fi%
  \let\MQ@closeQuestion=\MQ@closeAnswer%
  \let\MQ@closeOption=\relax}

% Finally we open and close the  whenRight/Wrong tags. 
\newcommand\MQ@when[1]{\MQ@closeOption%
  \def\MQ@closeOption{\HCode{]]>}\Tg</when#1>}%
  \IgnorePar\HCode{\Hnewline}\Tg<when#1>\HCode{<![CDATA[}%
}
\renewcommand\whenRight{\MQ@when{Right}}
\renewcommand\whenWrong{\MQ@when{Wrong}}

% MathQuiz href
\renewcommand{\MQhref}[3][]{\Tg<A href="#2" #1>\HCode{#3}\Tg</A>}

\begin{document}
\EndPreamble

\makeatother
\endinput
